("radix_sort" radix_sort radixsort_permutes 0 (radixsort_permutes-1 nil 3748006034 ("" (measure-induct+ "k-d" ("k" "d")) (("" (skeep) (("" (expand "radixsort" 1) (("" (lift-if) (("" (prop) (("1" (lemma "merge_sort_permutes") (("1" (inst? -1) nil nil)) nil) ("2" (inst? -1) (("2" (lemma "merge_sort_permutes") (("2" (split) (("1" (inst? -2) (("1" (lemma "permutations_is_transitive") (("1" (inst -1 "l" "merge_sort(l,x!2)" "radixsort(merge_sort(l,x!2), x!1, 1 + x!2)") (("1" (split) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (int_minus_int_is_int application-judgement "int" integers nil) (measure_induction formula-decl nil measure_induction nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (wf_nat formula-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (permutations const-decl "bool" sorting nil) (radixsort def-decl "list[nat]" radix_sort nil) (= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (merge_sort_permutes formula-decl nil radix_sort nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (permutations_is_transitive formula-decl nil sorting nil) (merge_sort def-decl "list[nat]" radix_sort nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))